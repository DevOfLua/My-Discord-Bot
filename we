**What Is DataStore**
DataStore is a storage that saves saves data.
Data stores are managed by DataStoreService, so your scripts must get the service before doing much else.
```
local DataStoreService = game:GetService("DataStoreService")
```

Remember DataStoreService can only be accessed by Script.

Once you have made DataStoreService variable you can get DataStore by adding GetDataStore.

GetDataStore requires a key for example here we have "PlayerStats" if we saved players data in this key and then we changed it all data that was saved in this key will be lost unless if we changed it back to "PlayerStats".
```
local DataStoreService = game:GetService("DataStoreService")
local GetDataStore = DataStoreService:GetDataStore("PlayerStats")
```
**Setting Data**

To set data we use **SetAsync()** 
first argument should always be Players UserId then the data
remember because ***SetAsync()*** function is connected to network sometimes it might make error so you should put this function in ***pcall()*** to catch and handle errors.

**Getting Data**
To Get data we use **GetAsync()** function first argument should always be Players UserId

Ok lets combine everything we just said.
i made basic script here
***Example 1***
```
local DataStoreService = game:GetService("DataStoreService")
local GetDataStore = DataStoreService:GetDataStore("PlayerStats")


function PlayerAdded(Player)
	local folder = Instance.new("Folder")
	folder.Name = "leaderstats"
	folder.Parent = Player
	
	local Points = Instance.new("NumberValue")
	Points.Name = "Points"
	Points.Parent = folder
	
	local Data = GetDataStore:GetAsync(Player.UserId)
	
	if Data then
		Points.Value = Data[1]
	end
end

function PlayerLeft(Player)
	GetDataStore:SetAsync(Player.UserId,{Player.leaderstats.Points.Value})
end

game.Players.PlayerAdded:Connect(PlayerAdded)
game.Players.PlayerRemoving:Connect(PlayerLeft)
```

***This is the DataStore that i made that saves every value***
with

* Tables
* ModuleScript
* pcall


**Start**
```
local sp = script.Parent;
local Main = sp.Parent;
local Modules = Main:WaitForChild("Modules");
local DataStoreSettings = require(Modules:WaitForChild("Settings"));

local StatsData = game:GetService("DataStoreService"):GetDataStore(DataStoreSettings.DataStore.StatsDataStore);

local DataStoreModule = require(Modules:WaitForChild("DataStore"));
local GameType = game:GetService("RunService"):IsStudio();

local Stats = {
	{"Example","NumberValue",0,true};
}
--[[
	{
		"Example", -- Value Name
		"BoolValue", -- Value Type
		false, -- Value
		false -- will it be in leaderstats folder or in player false = player true = leaderstats
	};
--]]

function PlayerAdded(Player)
	local leaderstats = Instance.new("Folder");
	leaderstats.Name = "leaderstats";
	leaderstats.Parent = Player;
	for i,v in next,Stats do
		if (v[4]) then
			local Value = Instance.new(v[2]);
			Value.Name = v[1];
			Value.Value = v[3];
			Value.Parent = leaderstats;
		else
			local Value = Instance.new(v[2]);
			Value.Name = v[1];
			Value.Value = v[3];
			Value.Parent = Player;
		end
	end
	
	DataStoreModule.LoadData(Player,leaderstats,StatsData);
end

function PlayerLeft(Player)
	local err,done = pcall(function()
		StatsData:SetAsync(Player.UserId,DataStoreModule.SaveData(Player.leaderstats));
	end)

	if (GameType == false) then
		game:GetService("TeleportService"):Teleport(game.PlaceId,Player);
	end
end

if (GameType == true) then
	game:BindToClose = function()
		for i,v in next,game.Players:GetChildren() do
			PlayerLeft(v);
		end
		while wait() do
			
		end
	end
end

game.Players.PlayerRemoving:Connect(PlayerLeft);
game.Players.PlayerAdded:Connect(PlayerAdded);
```

**DataStoreModule**
Make sure this modules name is DataStore

```
local function LoadData(Player,Inventory,Data)
	local UserData;
	pcall(function()
		UserData = Data:GetAsync(Player.UserId);
	end)
	if (UserData) then
		for i,v in next,UserData do
			--[[
				v = {name = v.Name;value = v.Value}
			--]]
			if (Inventory:FindFirstChild(v.name)) then
				Inventory[v.name].Value = v.value;
			else
				warn(v.name.." is not a valid member of "..Inventory.Name)
			end
		end
	end
end

local function SaveData(Inventory)
	local DataSave = {};
	for i,v in next,Inventory:GetChildren() do
		local TempData = 
		{
			name = v.Name;
			value = v.Value;
		};
		-- TempData = {name = v.Name;value = v.Value}
		table.insert(DataSave,TempData);
	end

	return DataSave;
end

local Module = {};

Module.LoadData = LoadData;
Module.SaveData = SaveData;

return Module;
```

**Settings**

```
local DatStore = {
	StatsDataStore = "ecawdawdawd", -- this is the key
}


local Module = {}

Module.DataStore = DatStore;

return Module
```

**NOTE!**

i used
```
game:BindToClose = function()

end
```
function so let me explain what does this do,this is very important when you use DataStore because if you shutdown all servers first scripts stop and then Players get kicked that means the PlayerRemoving will not run. this code will run 5 seconds before the server closes that means players data will not be lost also the loop makes the serer alive little bit longer. thanks for reading this i hope this helped you little bit!
also it needs to look something like this
![0_1544722624005_upload-6a5e55dc-3c25-4931-86ab-48e6a577245c](/uploads/files/1544722665485-upload-6a5e55dc-3c25-4931-86ab-48e6a577245c.png)

**CONSIDER**
if there is any error please message me :slight_smile:
